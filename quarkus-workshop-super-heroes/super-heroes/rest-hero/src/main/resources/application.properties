## HTTP configuration
# tag::adocPort[]
quarkus.http.port=${PORT:8083}
quarkus.http.host=0.0.0.0
# end::adocPort[]
# tag::adocCORS[]
quarkus.http.cors=true
# end::adocCORS[]

quarkus.oidc.auth-server-url=https://securetoken.google.com/my-microservices-playground
quarkus.oidc.client-id=rest-hero

## Database configuration
# tag::adocDatasource[]
quarkus.datasource.reactive.url=postgresql://${DB_HOST:localhost}:5432/hero_db
#quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:5432/hero_db?currentSchema=hero

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=service_hero
quarkus.datasource.password=${SERVICE_REST_HERO_SQLDB_PASSWORD:service_hero-password}

#%googlecloud.quarkus.datasource.additional-jdbc-properties.user=service_hero
#%googlecloud.quarkus.datasource.additional-jdbc-properties.password=${SQLDB_PASSWORD:superman}
#quarkus.datasource.max-size=8
#quarkus.datasource.min-size=2
# end::adocDatasource[]
# drop and create the database at startup (use `update` to only update the schema)
# tag::adocHibernate[]
%test.quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
# end::adocHibernate[]

## Logging configuration
# tag::adocLogging[]
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.level=INFO
quarkus.log.min-level=INFO
quarkus.log.console.level=DEBUG
quarkus.log.console.json.pretty-print=true
quarkus.log.console.color=true
# end::adocLogging[]

## Production configuration
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.log.console.level=INFO
%prod.quarkus.log.console.color=false
%prod.quarkus.hibernate-orm.database.generation=none

## Google Cloud configuration (Cloud Run + Cloud SQL)

# Reactive PostgreSQL client using TCP port
# of Google Cloud SQL private IP address
# at Google Cloud Run:
%googlecloud.quarkus.datasource.reactive.url=postgresql://${SERVICE_REST_HERO_SQLDB_INSTANCE_IP}/hero_db?options=--search_path%3Dhero

# Reactive PostgreSQL client using TCP port of cloud-sql-proxy
# in container (started in script in Dockerfile) at Google Cloud Run:
#%googlecloud.quarkus.datasource.reactive.url=postgresql:///hero?options=--search_path%3Dhero
##?user=service_hero&password=${SERVICE_REST_HERO_SQLDB_PASSWORD}

# Reactive PostgreSQL client using Unix Socket that is provided by Google Cloud Run
# (does not -yet- work in native executable):
# https://quarkus.io/guides/reactive-sql-clients#unix-domain-socket-connections
# https://quarkus.io/guides/vertx#native-transport
#%googlecloud.quarkus.datasource.reactive.url=postgresql://:5432/hero_db?host=/cloudsql/${SERVICE_REST_HERO_SQLDB_INSTANCE_CONNECTION_NAME}&options=--search_path%3Dhero
#%googlecloud.quarkus.vertx.prefer-native-transport=true

# Blocking (conventional) PostgreSQL client using Google's Java library with SocketFactory
# (that library requires additional native options, see below):
#%googlecloud.quarkus.datasource.jdbc.url=jdbc:postgresql:///hero_db?cloudSqlInstance=${SERVICE_REST_HERO_SQLDB_INSTANCE_CONNECTION_NAME}&socketFactory=com.google.cloud.sql.postgres.SocketFactory&ipTypes=PUBLIC,PRIVATE&&options=--search_path%3Dhero
##&user=service_hero&password=${SERVICE_REST_HERO_SQLDB_PASSWORD}

%googlecloud.quarkus.hibernate-orm.log.sql=false
%googlecloud.quarkus.log.console.level=INFO
%googlecloud.quarkus.log.console.color=false
%googlecloud.quarkus.hibernate-orm.database.generation=none

# Native options required for com.google.cloud.sql.postgres.SocketFactory:
#%googlecloud.quarkus.native.resources.includes=google-http-client.properties,com/google/**.jks,com/google/**.properties
#%googlecloud.quarkus.native.additional-build-args=\
#    -H:+AllowIncompleteClasspath, \
#    -H:+ReportUnsupportedElementsAtRuntime, \
#    -H:ReflectionConfigurationFiles=reflect-config.json, \
#    -H:ResourceConfigurationFiles=resource-config.json, \
#    -H:-UseServiceLoaderFeature, \
#    --enable-all-security-services
##    -H:ProxyConfigurationFiles=proxy-config.json, \
##    -H:JniConfigurationFiles=jni-config.json, \
##    --rerun-class-initialization-at-runtime=javax.net.ssl.SSLContext, \

## Test configuration
%test.level.multiplier = 1

# tag::adocConfigProperty[]
# Business configuration
level.multiplier = 3
# end::adocConfigProperty[]

# Enable fault injection
# tag::adocConfigFault[]
quarkus.fault.enabled=false
quarkus.fault.fault-ratio=0.2
quarkus.fault.delay-ratio=0.2
# end::adocConfigFault[]
