## HTTP configuration
quarkus.http.port=${PORT:8084}
quarkus.http.host=0.0.0.0
# tag::adocCORS[]
quarkus.http.cors=true
# end::adocCORS[]

quarkus.oidc.auth-server-url=https://securetoken.google.com/my-microservices-playground
quarkus.oidc.client-id=rest-villain

## Database configuration
quarkus.datasource.reactive.url=postgresql://${DB_HOST:localhost}:5432/villains_database
#quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:5432/villains_database

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=superbad
quarkus.datasource.password=superbad
#%googlecloud.quarkus.datasource.additional-jdbc-properties.user=${DATASOURCE_USER:superbad}
#%googlecloud.quarkus.datasource.additional-jdbc-properties.password=${DATASOURCE_PWD:superbad}
#quarkus.datasource.max-size=8
#quarkus.datasource.min-size=2
# drop and create the database at startup (use `update` to only update the schema)
%test.quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true

## Logging configuration
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.level=INFO
quarkus.log.min-level=INFO
quarkus.log.console.level=DEBUG
quarkus.log.console.json.pretty-print=true
quarkus.log.console.color=true

## Test configuration
%test.level.multiplier = 1

## Production configuration
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.log.console.level=INFO
%prod.quarkus.log.console.color=false
%prod.quarkus.hibernate-orm.database.generation=none

## Google Cloud configuration (Cloud Run + Cloud SQL)

%googlecloud.quarkus.datasource.reactive.url=postgresql://${SERVICE_REST_VILLAIN_DATASOURCE_INSTANCE_IP}/${SERVICE_REST_VILLAIN_DATASOURCE_DBNAME}
#%googlecloud.quarkus.datasource.jdbc.url=jdbc:postgresql:///${SERVICE_REST_VILLAIN_DATASOURCE_DBNAME}?cloudSqlInstance=${SERVICE_REST_VILLAIN_DATASOURCE_INSTANCE_CONNECTION_NAME}&socketFactory=com.google.cloud.sql.postgres.SocketFactory&ipTypes=PUBLIC,PRIVATE
##&user=${SERVICE_REST_VILLAIN_DATASOURCE_USER}&password=${SERVICE_REST_VILLAIN_DATASOURCE_PWD}

%googlecloud.quarkus.datasource.username=${SERVICE_REST_VILLAIN_DATASOURCE_USER}
%googlecloud.quarkus.datasource.password=${SERVICE_REST_VILLAIN_DATASOURCE_PWD}

%googlecloud.quarkus.hibernate-orm.log.sql=false
%googlecloud.quarkus.log.console.level=INFO
%googlecloud.quarkus.log.console.color=false
%googlecloud.quarkus.hibernate-orm.database.generation=none

# Native options required for com.google.cloud.sql.postgres.SocketFactory:
#%googlecloud.quarkus.native.resources.includes=google-http-client.properties,com/google/**.jks,com/google/**.properties
#%googlecloud.quarkus.native.additional-build-args=\
#    -H:+AllowIncompleteClasspath, \
#    -H:+ReportUnsupportedElementsAtRuntime, \
#    -H:ReflectionConfigurationFiles=reflect-config.json, \
#    -H:ResourceConfigurationFiles=resource-config.json, \
#    -H:-UseServiceLoaderFeature, \
#    --enable-all-security-services
##    -H:ProxyConfigurationFiles=proxy-config.json, \
##    -H:JniConfigurationFiles=jni-config.json, \
##    --rerun-class-initialization-at-runtime=javax.net.ssl.SSLContext, \


# tag::adocConfigProperty[]
# Business configuration
level.multiplier = 2
# end::adocConfigProperty[]
