quarkus.http.port=${PORT:8082}
quarkus.http.host=0.0.0.0
# tag::adocCORS[]
quarkus.http.cors=true
# end::adocCORS[]

## Database configuration
quarkus.datasource.reactive.url=postgresql://${DB_HOST:localhost}:5432/fight_db
#quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:5432/fight_db?currentSchema=fight

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=service_fight
quarkus.datasource.password=${SERVICE_REST_FIGHT_SQLDB_PASSWORD:service_fight-password}

#%googlecloud.quarkus.datasource.additional-jdbc-properties.user=superfight
#%googlecloud.quarkus.datasource.additional-jdbc-properties.password=superfight
#quarkus.datasource.max-size=8
#quarkus.datasource.min-size=2
%test.quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true


quarkus.oidc.auth-server-url=https://securetoken.google.com/my-microservices-playground
quarkus.oidc.client-id=rest-fight
#quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus
#quarkus.oidc.client-id=backend-service
#quarkus.oidc.credentials.secret=secret


## Logging configuration
quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.level=INFO
quarkus.log.min-level=INFO
quarkus.log.console.level=DEBUG
quarkus.log.console.json.pretty-print=true
quarkus.log.console.color=true

## Production configuration
%prod.quarkus.hibernate-orm.log.sql=false
%prod.quarkus.log.console.level=INFO
%prod.quarkus.log.console.color=false
%prod.quarkus.hibernate-orm.database.generation=none

## Google Cloud configuration (Cloud Run + Cloud SQL)

%googlecloud.quarkus.datasource.reactive.url=postgresql://${SERVICE_REST_FIGHT_SQLDB_INSTANCE_IP}/fight_db?options=--search_path%3Dfight
#%googlecloud.quarkus.datasource.jdbc.url=jdbc:postgresql:///fight_db?cloudSqlInstance=${SERVICE_REST_FIGHT_SQLDB_INSTANCE_CONNECTION_NAME}&socketFactory=com.google.cloud.sql.postgres.SocketFactory&ipTypes=PUBLIC,PRIVATE
##&user=service_fight&password=${SERVICE_REST_FIGHT_SQLDB_PASSWORD}

%googlecloud.quarkus.datasource.username=service_fight
%googlecloud.quarkus.datasource.password=${SERVICE_REST_FIGHT_SQLDB_PASSWORD}

%googlecloud.quarkus.hibernate-orm.log.sql=false
%googlecloud.quarkus.log.console.level=INFO
%googlecloud.quarkus.log.console.color=false
%googlecloud.quarkus.hibernate-orm.database.generation=none

# Native options required for com.google.cloud.sql.postgres.SocketFactory:
#%googlecloud.quarkus.native.resources.includes=google-http-client.properties,com/google/**.jks,com/google/**.properties
#%googlecloud.quarkus.native.additional-build-args=\
#    -H:+AllowIncompleteClasspath, \
#    -H:+ReportUnsupportedElementsAtRuntime, \
#    -H:ReflectionConfigurationFiles=reflect-config.json, \
#    -H:ResourceConfigurationFiles=resource-config.json, \
#    -H:-UseServiceLoaderFeature, \
#    --enable-all-security-services
##    -H:ProxyConfigurationFiles=proxy-config.json, \
##    -H:JniConfigurationFiles=jni-config.json, \
##    --rerun-class-initialization-at-runtime=javax.net.ssl.SSLContext, \

# Required connection configs for Kafka producer, consumer, and admin
%googlecloud.mp.messaging.outgoing.fights.bootstrap.servers=${SERVICE_REST_FIGHT_KAFKA_CLUSTER_BOOTSTRAP_SERVERS}
%googlecloud.mp.messaging.outgoing.fights.security.protocol=SASL_SSL
%googlecloud.mp.messaging.outgoing.fights.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username="${SERVICE_REST_FIGHT_KAFKA_CLUSTER_API_KEY}" password="${SERVICE_REST_FIGHT_KAFKA_CLUSTER_API_SECRET}";
%googlecloud.mp.messaging.outgoing.fights.sasl.mechanism=PLAIN
# Required for correctness in Apache Kafka clients prior to 2.6
%googlecloud.mp.messaging.outgoing.fights.client.dns.lookup=use_all_dns_ips
# Best practice for Kafka producer to prevent data loss
%googlecloud.mp.messaging.outgoing.fights.acks=all
## Required connection configs for Confluent Cloud Schema Registry
#schema.registry.url=https://{{ SR_ENDPOINT }}
#basic.auth.credentials.source=USER_INFO
#basic.auth.user.info={{ SR_API_KEY }}:{{ SR_API_SECRET }}


process.milliseconds=0

# tag::adocRestClient[]
io.quarkus.workshop.superheroes.fight.client.HeroService/mp-rest/url=${SERVICE_REST_HERO_URL:http://localhost:8083}
io.quarkus.workshop.superheroes.fight.client.HeroService/mp-rest/scope=javax.inject.Singleton
io.quarkus.workshop.superheroes.fight.client.VillainService/mp-rest/url=${SERVICE_REST_VILLAIN_URL:http://localhost:8084}
io.quarkus.workshop.superheroes.fight.client.VillainService/mp-rest/scope=javax.inject.Singleton
# end::adocRestClient[]

# tag::adocKafka[]
## Kafka configuration
mp.messaging.outgoing.fights.connector=smallrye-kafka
mp.messaging.outgoing.fights.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
# Cloud Events Metadata:
# https://quarkus.io/blog/kafka-cloud-events/
mp.messaging.outgoing.fights.cloud-events-source=rest-fight
mp.messaging.outgoing.fights.cloud-events-type=superheroes.fight.Fight
mp.messaging.outgoing.fights.cloud-events-subject=fights
# end::adocKafka[]

# tag::adocBanner[]
quarkus.banner.path=banner.txt
# end::adocBanner[]
