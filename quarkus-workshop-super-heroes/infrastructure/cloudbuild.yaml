# Cloud Build is triggered when you push Terraform code to a branch. It then applies Terraform manifests to achieve
# the state you want in the environment named by the branch name (e.g. dev or prod).
#
# On the other hand, when you push Terraform code to any other branch — for example, to a feature branch — Cloud Build
# runs to execute terraform plan, but nothing is applied to any environment. This way, you can discuss and review the
# potential changes and add follow-up commits before changes are merged into the base branch.
#
# https://cloud.google.com/solutions/managing-infrastructure-as-code
# https://github.com/GoogleCloudPlatform/cloud-builders-community/tree/master/terraform
# https://cloud.google.com/build/docs/securing-builds/use-secrets

steps:

  - id: 'print branch name'
    name: 'gcr.io/cloud-builders/gcloud-slim'
    #name: 'alpine'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "***********************"
        echo "Branch: $BRANCH_NAME"
        echo "***********************"

  - id: 'tf init'
    name: 'hashicorp/terraform:0.14.10'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "terraform/environments/$BRANCH_NAME/" ]; then
          cd terraform/environments/$BRANCH_NAME
          terraform init
        else
          for dir in terraform/environments/*/
          do
            cd ${dir}
            env=${dir%*/}
            env=${env#*/}
            echo ""
            echo "*************** TERRAFORM INIT ******************"
            echo "Environment: ${env}"
            echo "*************************************************"
            terraform init || exit 1
          done
        fi

  - id: 'tf plan'
    name: 'hashicorp/terraform:0.14.10'
    secretEnv:
      - MONGODB_ATLAS_PUBLIC_KEY
      - MONGODB_ATLAS_PRIVATE_KEY
      - CONFLUENT_CLOUD_USERNAME
      - CONFLUENT_CLOUD_PASSWORD
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "terraform/environments/$BRANCH_NAME/" ]; then
          # Printing plan. Not saving plan:
          # - it contains secrets
          # - the cloud resources might change before running terraform apply in the next step (so the plan would be outdated)
          cd terraform/environments/$BRANCH_NAME
          terraform plan
        else
          for dir in terraform/environments/*/
          do
            cd ${dir}
            env=${dir%*/}
            env=${env#*/}
            echo ""
            echo "*************** TERRAFORM PLAN ******************"
            echo "Environment: ${env}"
            echo "*************************************************"
            terraform plan || exit 1
          done
        fi

  - id: 'tf apply'
    name: 'hashicorp/terraform:0.14.10'
    secretEnv:
      - MONGODB_ATLAS_PUBLIC_KEY
      - MONGODB_ATLAS_PRIVATE_KEY
      - CONFLUENT_CLOUD_USERNAME
      - CONFLUENT_CLOUD_PASSWORD
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        if [ -d "terraform/environments/$BRANCH_NAME/" ]; then
          cd terraform/environments/$BRANCH_NAME
          terraform apply -auto-approve \
          && terraform output -json > /workspace/default.tfstate.output.json
        else
          echo "***************************** SKIPPING APPLYING *******************************"
          echo "No terraform/environments/$BRANCH_NAME, skipping terraform apply."
          echo "*******************************************************************************"
        fi

# Export terraform state to json and upload to Cloud Storage Bucket so that database connection strings etc.
# can be read from it when deploying services.
# Not using the artifacts keyword of cloudbuild.yaml because the bucket and file only exist for certain branches.
  - id: 'tf state json upload'
    name: 'gcr.io/cloud-builders/gcloud-slim'
    #name: 'eu.gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    entrypoint: 'bash' # https://cloud.google.com/build/docs/configuring-builds/run-bash-scripts
    args:
      - '-eEuo'
      - 'pipefail'
      - '-c'
      - |-
        if [ -d "terraform/environments/$BRANCH_NAME/" ]; then
            if [[ -f /workspace/default.tfstate.output.json ]]; then
                gsutil cp /workspace/default.tfstate.output.json gs://${PROJECT_ID}_terraform/${BRANCH_NAME}/terraform/state/
            else
                echo "Error: default.tfstate.output.json should exist for branch '$BRANCH_NAME'"
                exit 1
            fi
        else
            echo "Not uploading default.tfstate.output.json in branch '$BRANCH_NAME'"
        fi

#env:
#  - TF_LOG: "TRACE"

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/terraform_mongodbatlas_publickey/versions/latest
      env: 'MONGODB_ATLAS_PUBLIC_KEY'
    - versionName: projects/$PROJECT_ID/secrets/terraform_mongodbatlas_privatekey/versions/latest
      env: 'MONGODB_ATLAS_PRIVATE_KEY'
    - versionName: projects/$PROJECT_ID/secrets/terraform_confluentcloud_username/versions/latest
      env: 'CONFLUENT_CLOUD_USERNAME'
    - versionName: projects/$PROJECT_ID/secrets/terraform_confluentcloud_password/versions/latest
      env: 'CONFLUENT_CLOUD_PASSWORD'
